{"uid":"ba2325b82b5fa489","name":"test_printCarNamesandPrices[chrome-Hyundai-Hyundai Cars]","fullName":"test_carwale.Test_CarWale#test_printCarNamesandPrices","historyId":"9f7f302f85d0fd4675eaeb843abb6100","time":{"start":1689269195439,"stop":1689269205735,"duration":10296},"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//div[contains(text(),'Find New Cars')]\"}\n  (Session info: chrome=114.0.5735.199)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x011EA813+48355]\n\t(No symbol) [0x0117C4B1]\n\t(No symbol) [0x01085358]\n\t(No symbol) [0x010B09A5]\n\t(No symbol) [0x010B0B3B]\n\t(No symbol) [0x010DE232]\n\t(No symbol) [0x010CA784]\n\t(No symbol) [0x010DC922]\n\t(No symbol) [0x010CA536]\n\t(No symbol) [0x010A82DC]\n\t(No symbol) [0x010A93DD]\n\tGetHandleVerifier [0x0144AABD+2539405]\n\tGetHandleVerifier [0x0148A78F+2800735]\n\tGetHandleVerifier [0x0148456C+2775612]\n\tGetHandleVerifier [0x012751E0+616112]\n\t(No symbol) [0x01185F8C]\n\t(No symbol) [0x01182328]\n\t(No symbol) [0x0118240B]\n\t(No symbol) [0x01174FF7]\n\tBaseThreadInitThunk [0x777E00C9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77A97B4E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77A97B1E+238]","statusTrace":"self = <Testcases.test_carwale.Test_CarWale object at 0x000001CDE65A9F10>\ncarBrand = 'Hyundai', carTitle = 'Hyundai Cars'\n\n    @pytest.mark.parametrize(\"carBrand,carTitle\",\n                             dataProvider.get_data(\"NewCarsTest\"))\n    def test_printCarNamesandPrices(self, carBrand,carTitle):\n        log.logger.info(\"******Inside Car Names and Prices Test*********\")\n        home = HomePage(self.driver)\n        car = CarBase(self.driver)\n    \n        print(\"Car brand is : \",carBrand)\n        if carBrand == \"BMW\":\n           home.gotoNewCars().selectBMW()\n           title = car.getCarTitle()\n           print(\"Car Title is : \"+title)\n           assert title == carTitle, \"Not on the correct page as title is not matching\"\n           car.getCarNameAndPrices()\n        elif carBrand == \"Hyundai\":\n>          home.gotoNewCars().selectHyundai()\n\ntest_carwale.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\Pages\\HomePage.py:13: in gotoNewCars\n    self.click(\"findNewCars_XPATH\")\n..\\Pages\\BasePage.py:18: in click\n    self.driver.find_element_by_xpath(configReader.readConfig(\"locators\", locator)).click()\n..\\..\\..\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:514: in find_element_by_xpath\n    return self.find_element(by=By.XPATH, value=xpath)\n..\\..\\..\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1238: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\n..\\..\\..\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:418: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001CDE653AD60>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77A97B4E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77A97B1E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//div[contains(text(),'Find New Cars')]\"}\nE         (Session info: chrome=114.0.5735.199)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x011EA813+48355]\nE       \t(No symbol) [0x0117C4B1]\nE       \t(No symbol) [0x01085358]\nE       \t(No symbol) [0x010B09A5]\nE       \t(No symbol) [0x010B0B3B]\nE       \t(No symbol) [0x010DE232]\nE       \t(No symbol) [0x010CA784]\nE       \t(No symbol) [0x010DC922]\nE       \t(No symbol) [0x010CA536]\nE       \t(No symbol) [0x010A82DC]\nE       \t(No symbol) [0x010A93DD]\nE       \tGetHandleVerifier [0x0144AABD+2539405]\nE       \tGetHandleVerifier [0x0148A78F+2800735]\nE       \tGetHandleVerifier [0x0148456C+2775612]\nE       \tGetHandleVerifier [0x012751E0+616112]\nE       \t(No symbol) [0x01185F8C]\nE       \t(No symbol) [0x01182328]\nE       \t(No symbol) [0x0118240B]\nE       \t(No symbol) [0x01174FF7]\nE       \tBaseThreadInitThunk [0x777E00C9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77A97B4E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77A97B1E+238]\n\n..\\..\\..\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: NoSuchElementException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"get_browser","time":{"start":1689269192743,"stop":1689269195437,"duration":2694},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"log_on_failure","time":{"start":1689269195437,"stop":1689269195437,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//div[contains(text(),'Find New Cars')]\"}\n  (Session info: chrome=114.0.5735.199)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x011EA813+48355]\n\t(No symbol) [0x0117C4B1]\n\t(No symbol) [0x01085358]\n\t(No symbol) [0x010B09A5]\n\t(No symbol) [0x010B0B3B]\n\t(No symbol) [0x010DE232]\n\t(No symbol) [0x010CA784]\n\t(No symbol) [0x010DC922]\n\t(No symbol) [0x010CA536]\n\t(No symbol) [0x010A82DC]\n\t(No symbol) [0x010A93DD]\n\tGetHandleVerifier [0x0144AABD+2539405]\n\tGetHandleVerifier [0x0148A78F+2800735]\n\tGetHandleVerifier [0x0148456C+2775612]\n\tGetHandleVerifier [0x012751E0+616112]\n\t(No symbol) [0x01185F8C]\n\t(No symbol) [0x01182328]\n\t(No symbol) [0x0118240B]\n\t(No symbol) [0x01174FF7]\n\tBaseThreadInitThunk [0x777E00C9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77A97B4E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77A97B1E+238]","statusTrace":"self = <Testcases.test_carwale.Test_CarWale object at 0x000001CDE65A9F10>\ncarBrand = 'Hyundai', carTitle = 'Hyundai Cars'\n\n    @pytest.mark.parametrize(\"carBrand,carTitle\",\n                             dataProvider.get_data(\"NewCarsTest\"))\n    def test_printCarNamesandPrices(self, carBrand,carTitle):\n        log.logger.info(\"******Inside Car Names and Prices Test*********\")\n        home = HomePage(self.driver)\n        car = CarBase(self.driver)\n    \n        print(\"Car brand is : \",carBrand)\n        if carBrand == \"BMW\":\n           home.gotoNewCars().selectBMW()\n           title = car.getCarTitle()\n           print(\"Car Title is : \"+title)\n           assert title == carTitle, \"Not on the correct page as title is not matching\"\n           car.getCarNameAndPrices()\n        elif carBrand == \"Hyundai\":\n>          home.gotoNewCars().selectHyundai()\n\ntest_carwale.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\Pages\\HomePage.py:13: in gotoNewCars\n    self.click(\"findNewCars_XPATH\")\n..\\Pages\\BasePage.py:18: in click\n    self.driver.find_element_by_xpath(configReader.readConfig(\"locators\", locator)).click()\n..\\..\\..\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:514: in find_element_by_xpath\n    return self.find_element(by=By.XPATH, value=xpath)\n..\\..\\..\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1238: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\n..\\..\\..\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:418: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001CDE653AD60>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77A97B4E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77A97B1E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//div[contains(text(),'Find New Cars')]\"}\nE         (Session info: chrome=114.0.5735.199)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x011EA813+48355]\nE       \t(No symbol) [0x0117C4B1]\nE       \t(No symbol) [0x01085358]\nE       \t(No symbol) [0x010B09A5]\nE       \t(No symbol) [0x010B0B3B]\nE       \t(No symbol) [0x010DE232]\nE       \t(No symbol) [0x010CA784]\nE       \t(No symbol) [0x010DC922]\nE       \t(No symbol) [0x010CA536]\nE       \t(No symbol) [0x010A82DC]\nE       \t(No symbol) [0x010A93DD]\nE       \tGetHandleVerifier [0x0144AABD+2539405]\nE       \tGetHandleVerifier [0x0148A78F+2800735]\nE       \tGetHandleVerifier [0x0148456C+2775612]\nE       \tGetHandleVerifier [0x012751E0+616112]\nE       \t(No symbol) [0x01185F8C]\nE       \t(No symbol) [0x01182328]\nE       \t(No symbol) [0x0118240B]\nE       \t(No symbol) [0x01174FF7]\nE       \tBaseThreadInitThunk [0x777E00C9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77A97B4E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77A97B1E+238]\n\n..\\..\\..\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: NoSuchElementException","steps":[],"attachments":[{"uid":"50745118fd5dd8af","name":"log","source":"50745118fd5dd8af.txt","type":"text/plain","size":493},{"uid":"647f859174aa47dd","name":"stdout","source":"647f859174aa47dd.txt","type":"text/plain","size":26},{"uid":"138a32306007502e","name":"stderr","source":"138a32306007502e.txt","type":"text/plain","size":249}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":3,"shouldDisplayMessage":true},"afterStages":[{"name":"log_on_failure::0","time":{"start":1689269205786,"stop":1689269206362,"duration":576},"status":"passed","steps":[],"attachments":[{"uid":"96d6a1ddc5b96235","name":"dologin","source":"96d6a1ddc5b96235.png","type":"image/png","size":1460789}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":1,"shouldDisplayMessage":false},{"name":"get_browser::0","time":{"start":1689269206363,"stop":1689269208515,"duration":2152},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('log_on_failure', 'get_browser')"},{"name":"suite","value":"test_carwale"},{"name":"subSuite","value":"Test_CarWale"},{"name":"host","value":"LAPTOP-255FKNLH"},{"name":"thread","value":"12428-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_carwale"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"carBrand","value":"'Hyundai'"},{"name":"carTitle","value":"'Hyundai Cars'"},{"name":"get_browser","value":"'chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures('log_on_failure', 'get_browser')"]},"source":"ba2325b82b5fa489.json","parameterValues":["'Hyundai'","'Hyundai Cars'","'chrome'"]}